
%% script for segmenting hyperintensities on a new image given training outputs

function names = WhyD_detect(names, training_path)

%% loading image data and options for training 
input = load_nii(fullfile(names.directory_path, names.WM_mod));
load(fullfile(training_path, 'options_training.mat'), 'width', 'K');
sub_image = padarray(input.img(K+1:end-K,K+1:end-K,K+1:end-K), [K K K]);
sub_dim = size(sub_image);
[ker, width_vec] = getKernels(width);

%% segmenting new subject
% initializing the segmentation process
fg_thresh = 0.6 * max(sub_image(:));
fg = find(sub_image > fg_thresh);
names.method = 'DNN Classification';
print = struct('name', 'DNN Classification', 'short', 'DNN');
fprintf('Segmenting subject: %s_%s using %s.\n',names.folder_name, names.folder_id, print.name);

[Xr,Yr,Zr] = ind2sub(sub_dim, fg);
D  = zeros(length(fg), K^3);
D2 = zeros(length(fg), K^3 * length(ker));
R  = -(K-1)/2:(K-1)/2;
for n = 1:length(fg)
    local = sub_image(Xr(n) + R,Yr(n) + R,Zr(n) + R);
    D(n,:) = local(:);
    for k = 1:length(ker)
        r = (k-1)*K^3+1:k*K^3;
        conv = convn(local, ker{k,1}, 'same');
        D2(n,r) = conv(:) / width_vec(k)^3;
        if k == length(ker),      D2(n,r) = D2(n,r) / 3;
        elseif 3 <= k && k <= 8,  D2(n,r) = D2(n,r) + D(n,:);
        elseif 9 <= k && k <= 14, D2(n,r) = D2(n,r) - D(n,:);
        end
    end
end

disp('Detecting ...')
% writes the features to the file for testing purposes
csvwrite(fullfile(training_path, 'feature_set.csv'), [D,D2]);
 % executes the testing script
system(sprintf('python %s/W2MHS_testing.py', names.w2mhstoolbox_path));
 % converts the binary label output from string to integer 
oo = csvread(fullfile(training_path, 'DNN_testing_file.csv'));

fprintf('Done segmenting subject : %s_%s using %s method \n', names.folder_name, names.folder_id, print.name);
out = zeros(sub_dim); out(ind2sub(sub_dim, fg)) = oo;
% saving the segmentated output and updating names file
nii = input; nii.img = out;
names.seg_out = sprintf('%s_out_%s.nii', print.short, names.folder_id);
save_nii(nii, fullfile(names.directory_path, names.seg_out));
save(sprintf('%s/names_%s.mat', names.directory_path, names.folder_id), 'names');

%% end
